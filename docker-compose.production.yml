services:
  db:
    image: postgres:14
    container_name: foodgram-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data_production:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  backend:
    image: annalevina/foodgram_backend
    command: >
      sh -c "until pg_isready -h db -p 5432; do sleep 1; done &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn foodgram_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - media_volume:/app/media
      - static_volume:/app/static
    depends_on:
      - db
    env_file:
      - .env
    environment:
      DB_ENGINE: django.db.backends.postgresql
      POSTGRES_DB: foodgram
      POSTGRES_USER: foodgram_user
      POSTGRES_PASSWORD: foodgram_password
      DB_HOST: db
      DB_PORT: 5432
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@mail.com
      DJANGO_SUPERUSER_PASSWORD: wBkyisAt

    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 5s
      retries: 5

  frontend:
    image: annalevina/foodgram_frontend
    container_name: foodgram-front
    volumes:
      - ../frontend/:/app/result_build/

  nginx:
    image: annalevina/foodgram_nginx
    container_name: foodgram-proxy
    ports:
      - "8000:80"
    volumes:
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - media_volume:/var/www/media:ro
      - static_volume:/var/www/static:ro
    depends_on:
      backend:
        condition: service_healthy

volumes:
  pg_data_production:
  static_volume:
  media_volume:
